// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String  @id @default(ulid())
  email         String  @unique
  name          String
  emailVerified Boolean
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  accounts    Account[]
  wallet      Wallet[]
  category    Category[]
  budget      Budget[]
  debt        Debt[]
  recurring   Recurring[]
  transaction Transaction[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Wallet {
  id           String        @id @default(uuid())
  name         String
  currency     String
  balance      Int           @default(0)
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id         String          @id @default(uuid())
  amount     Int
  type       TransactionType
  note       String?
  date       DateTime
  categoryId String?
  walletId   String?
  userId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category? @relation(fields: [categoryId], references: [id])
  wallet   Wallet?   @relation(fields: [walletId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Category {
  id           String          @id @default(uuid())
  name         String
  icon         String?
  type         TransactionType
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets      Budget[]
  recurring    Recurring[]
}

model Budget {
  id         String   @id @default(uuid())
  amount     Int
  startDate  DateTime
  endDate    DateTime
  categoryId String
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Debt {
  id        String   @id @default(uuid())
  amount    Int
  note      String?
  isLent    Boolean // true = piutang, false = utang
  dueDate   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recurring {
  id         String             @id @default(uuid())
  amount     Int
  type       TransactionType
  note       String?
  interval   RecurrenceInterval
  categoryId String
  userId     String
  date       String?

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

enum RecurrenceInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
